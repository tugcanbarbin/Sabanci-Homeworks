quicksort O(NlogN)
pick a pivot
partition the elements into two smaller and bigger then
quicksort s1
quicksors s2

median of three strategy

if n is small O(N^2) algorithm can be better like insertion sort
const Comparable & median3 (vector &a, int left, int right)
{
	int center = (left+right)  /2;
	if(a[center] < a[left])
		swap(a[left],a[center]);
	if(a[right] < a[left])
		swap(a[left],a[right]);
	if(a[right] < a[center])
		swap(a[center],a[right]);
	swap(a[center], a[right-1]);
	return a[right-1];
}
void quicksort(vector &a, int left, int right)
{
	if(left+10 <= right)
	{
		comparable pivot = median3(a,left,right);
		int i = left, i = right-1;
		for(;;)
		{
			while(a[++i] < pivot){}
			while(pivot < a[--j]){}
			if(i<<j)
				swap(a[i], a[j]);
			else
				break;
		}
		swap(a[i], a[right-1]);
		quicksort(a,left,i-1);
		quicksort(a,i+1,right);	
	}
	else
		insertionSort(a,left,right);
}

quickselect avg O(N) worst O(N^2)
pick a pivot
partition the elements into two smaller and bigger then
if kth element
k <= size of s1 
quickselect s1,k
k= s1 +1 return pivot
k > size of s1+1 
quickselect s2,k-sizeofs1-1

